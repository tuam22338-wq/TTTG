import React, { useState } from 'react';
import { WorldCreationState, NarrativePerspective, Settings } from '../../types';
import FormSection from './FormSection';
import InputField from '../ui/InputField';
import TextareaField from '../ui/TextareaField';
import ToggleSwitch from '../ui/ToggleSwitch';
import { SparklesIcon } from '../icons/SparklesIcon';
import { GoogleGenAI, HarmCategory, HarmBlockThreshold } from '@google/genai';
import Button from '../ui/Button';
import * as client from '../../services/gemini/client';
import { ApiClient } from '../../services/gemini/client';

interface WorldInfoFormProps {
    state: WorldCreationState;
    setState: React.Dispatch<React.SetStateAction<WorldCreationState>>;
    apiClient: ApiClient;
    settings: Settings;
}

const perspectiveDescriptions: Record<NarrativePerspective, { title: string; text: string; special?: string }> = {
  'Nh√£n Quan To√†n Tri': {
    title: 'Nh√£n Quan To√†n Tri (Khuy·∫øn kh√≠ch)',
    text: 'B·∫°n s·∫Ω theo ch√¢n nh√¢n v·∫≠t ch√≠nh (ng√¥i th·ª© ba gi·ªõi h·∫°n), nh∆∞ng ƒë√¥i khi, AI s·∫Ω h√© l·ªô nh·ªØng "c·∫£nh c·∫Øt" ƒë·∫∑c bi·ªát v·ªÅ c√°c s·ª± ki·ªán, suy nghƒ© v√† b√≠ m·∫≠t m√† nh√¢n v·∫≠t c·ªßa b·∫°n kh√¥ng h·ªÅ hay bi·∫øt, t·∫°o ra s·ª± k·ªãch t√≠nh v√† chi·ªÅu s√¢u cho c·ªët truy·ªán.',
    special: 'C√°c "c·∫£nh c·∫Øt" n√†y s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã trong m·ªôt khung ri√™ng bi·ªát v·ªõi bi·ªÉu t∆∞·ª£ng con m·∫Øt (üëÅÔ∏è) ƒë·ªÉ b·∫°n d·ªÖ d√†ng nh·∫≠n ra.',
  },
  'Ng√¥i th·ª© ba Gi·ªõi h·∫°n': {
    title: 'Ng√¥i th·ª© ba Gi·ªõi h·∫°n',
    text: 'C√¢u chuy·ªán ƒë∆∞·ª£c k·ªÉ qua g√≥c nh√¨n c·ªßa nh√¢n v·∫≠t ch√≠nh. B·∫°n ch·ªâ bi·∫øt nh·ªØng g√¨ nh√¢n v·∫≠t c·ªßa b·∫°n bi·∫øt, th·∫•y, v√† c·∫£m nh·∫≠n. M·ªôt tr·∫£i nghi·ªám nh·∫≠p vai c·ªï ƒëi·ªÉn.',
  },
  'Ng√¥i th·ª© hai': {
    title: 'Ng√¥i th·ª© hai',
    text: 'AI s·∫Ω k·ªÉ chuy·ªán tr·ª±c ti·∫øp v·ªõi b·∫°n, s·ª≠ d·ª•ng ƒë·∫°i t·ª´ "B·∫°n". ƒê√¢y l√† l·ªëi k·ªÉ chuy·ªán nh·∫≠p vai s√¢u, khi·∫øn b·∫°n c·∫£m th·∫•y m√¨nh th·ª±c s·ª± l√† nh√¢n v·∫≠t ch√≠nh.',
  },
  'Ng√¥i th·ª© ba To√†n tri': {
    title: 'Ng√¥i th·ª© ba To√†n tri (C≈©)',
    text: 'Ng∆∞·ªùi k·ªÉ chuy·ªán bi·∫øt m·ªçi th·ª©. AI c√≥ th·ªÉ m√¥ t·∫£ suy nghƒ© v√† h√†nh ƒë·ªông c·ªßa b·∫•t k·ª≥ nh√¢n v·∫≠t n√†o, ·ªü b·∫•t k·ª≥ ƒë√¢u, v√† l·ªìng gh√©p ch√∫ng tr·ª±c ti·∫øp v√†o d√≤ng t·ª± s·ª± ch√≠nh.',
  },
};

const WorldInfoForm: React.FC<WorldInfoFormProps> = ({ state, setState, apiClient, settings }) => {
    const [isLoading, setIsLoading] = useState(false);
    const { getApiClient } = apiClient;

    const handleGenerateDescription = async () => {
        if (!getApiClient()) {
            alert("D·ªãch v·ª• AI ch∆∞a s·∫µn s√†ng ho·∫∑c ch∆∞a c·∫•u h√¨nh API Key.");
            apiClient.onApiKeyInvalid();
            return;
        }
        if (!state.genre && !state.description.trim()) {
            alert("Vui l√≤ng nh·∫≠p Th·ªÉ lo·∫°i game ho·∫∑c M√¥ t·∫£ B·ªëi C·∫£nh tr∆∞·ªõc khi t·∫°o.");
            return;
        }

        setIsLoading(true);

        let basePrompt: string;

        if (state.description.trim()) {
            // --- User has provided input, develop it ---
            basePrompt = `B·∫°n l√† m·ªôt AI bi√™n k·ªãch v√† x√¢y d·ª±ng th·∫ø gi·ªõi. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc m·ªôt √Ω t∆∞·ªüng ban ƒë·∫ßu t·ª´ ng∆∞·ªùi d√πng v√† ph√°t tri·ªÉn n√≥ th√†nh m·ªôt b·ªëi c·∫£nh th·∫ø gi·ªõi ho√†n ch·ªânh, chi ti·∫øt v√† l√¥i cu·ªën.

**Y√™u c·∫ßu:**
1.  **T√¥n tr·ªçng √Ω t∆∞·ªüng g·ªëc:** Gi·ªØ l·∫°i v√† l√†m s√¢u s·∫Øc th√™m t·∫•t c·∫£ c√°c y·∫øu t·ªë c·ªët l√µi m√† ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p (t√™n ƒë·ªãa danh, nh√¢n v·∫≠t, s·ª± ki·ªán, kh√°i ni·ªám...).
2.  **L√†m phong ph√∫:** M·ªü r·ªông c√°c chi ti·∫øt, l·∫•p ƒë·∫ßy nh·ªØng kho·∫£ng tr·ªëng m·ªôt c√°ch logic v√† s√°ng t·∫°o ƒë·ªÉ t·∫°o ra m·ªôt b·ª©c tranh to√†n c·∫£nh s·ªëng ƒë·ªông.
3.  **C·∫•u tr√∫c h√≥a:** S·∫Øp x·∫øp l·∫°i th√¥ng tin th√†nh m·ªôt ƒëo·∫°n vƒÉn xu√¥i m·∫°ch l·∫°c, c√≥ c·∫•u tr√∫c r√µ r√†ng (v√≠ d·ª•: gi·ªõi thi·ªáu chung, ƒë·ªãa l√Ω, ch√≠nh tr·ªã, vƒÉn h√≥a, c√°c y·∫øu t·ªë ƒë·∫∑c tr∆∞ng...), nh∆∞ng CH·ªà d·ª±a tr√™n nh·ªØng g√¨ ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p ho·∫∑c suy lu·∫≠n logic t·ª´ ƒë√≥.
4.  **TUY·ªÜT ƒê·ªêI C·∫§M:** Kh√¥ng ƒë∆∞·ª£c t·ª± √Ω th√™m v√†o c√°c kh√°i ni·ªám, y·∫øu t·ªë, ho·∫∑c chi ti·∫øt ho√†n to√†n m·ªõi m√† kh√¥ng c√≥ trong ho·∫∑c kh√¥ng li√™n quan tr·ª±c ti·∫øp ƒë·∫øn √Ω t∆∞·ªüng g·ªëc c·ªßa ng∆∞·ªùi d√πng. M·ª•c ti√™u l√† ph√°t tri·ªÉn, kh√¥ng ph·∫£i thay th·∫ø.

**Th·ªÉ lo·∫°i tham kh·∫£o (n·∫øu c√≥):** "${state.genre || 'Kh√¥ng c√≥'}"
**√ù t∆∞·ªüng ban ƒë·∫ßu c·ªßa ng∆∞·ªùi d√πng:**
---
${state.description}
---

H√£y b·∫Øt ƒë·∫ßu ph√°t tri·ªÉn √Ω t∆∞·ªüng tr√™n th√†nh m·ªôt b·ªëi c·∫£nh th·∫ø gi·ªõi ho√†n ch·ªânh.`;

        } else {
            // --- User has not provided input, generate from scratch based on genre ---
            basePrompt = `D·ª±a tr√™n th·ªÉ lo·∫°i "${state.genre}", h√£y x√¢y d·ª±ng m·ªôt th·∫ø gi·ªõi chi ti·∫øt. C·∫ßn bao g·ªìm:

- T√™n th·∫ø gi·ªõi: M·ªôt c√°i t√™n c√≥ √Ω nghƒ©a, g·ª£i l√™n ƒë·∫∑c tr∆∞ng c·ªßa th·∫ø gi·ªõi.
- T·ªïng quan: M√¥ t·∫£ kh√°i qu√°t v·ªÅ th·∫ø gi·ªõi (v√≠ d·ª•: ƒëang ·ªü trong th·ªùi k·ª≥ chi·∫øn tranh, th·ªãnh v∆∞·ª£ng, hay suy t√†n).
- C·∫•u tr√∫c x√£ h·ªôi v√† ch√≠nh tr·ªã: C√°c th·∫ø l·ª±c ch√≠nh, h·ªá th·ªëng cai tr·ªã, v√† m·ªëi quan h·ªá gi·ªØa c√°c phe ph√°i.
- ƒê·∫∑c tr∆∞ng ƒë·ªãa l√Ω v√† vƒÉn h√≥a: Nh·ªØng v√πng ƒë·∫•t ƒë·∫∑c bi·ªát, c√°c ch·ªßng t·ªôc sinh s·ªëng, v√† phong t·ª•c t·∫≠p qu√°n n·ªïi b·∫≠t.
- Y·∫øu t·ªë ƒë·∫∑c bi·ªát: M·ªôt y·∫øu t·ªë ƒë·ªôc ƒë√°o c·ªßa th·∫ø gi·ªõi (v√≠ d·ª•: m·ªôt lo·∫°i ma thu·∫≠t hi·∫øm, m·ªôt b√≠ m·∫≠t c·ªï x∆∞a).

H√£y vi·∫øt m·ªôt ƒëo·∫°n vƒÉn m·∫°ch l·∫°c, k·∫øt h·ª£p c√°c y·∫øu-t·ªë tr√™n ƒë·ªÉ t·∫°o n√™n m·ªôt b·ªëi c·∫£nh h·∫•p d·∫´n v√† c√≥ t√≠nh s√°ng t·∫°o.`;
        }

        let prompt = basePrompt;
        if (state.isNsfw) {
            prompt += "\n\nQuan tr·ªçng: V√¨ ƒë√¢y l√† th·∫ø gi·ªõi 18+, h√£y l·ªìng gh√©p c√°c y·∫øu t·ªë tr∆∞·ªüng th√†nh, nh·ª•c d·ª•c, ho·∫∑c b·∫°o l·ª±c m·ªôt c√°ch t·ª± nhi√™n v√†o c√°c kh√≠a c·∫°nh tr√™n (v√≠ d·ª•: m·ªôt x√£ h·ªôi t√¥n th·ªù kho√°i l·∫°c, m·ªôt phe ph√°i ch√≠nh tr·ªã t√†n b·∫°o, c√°c phong t·ª•c vƒÉn h√≥a nh·∫°y c·∫£m).";
        }
        
        try {
            const safetySettingsConfig = state.isNsfw ? [
                { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_NONE },
                { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_NONE },
                { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_NONE },
                { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_NONE },
            ] : [];

            const response = await client.callCreativeTextAI(prompt, apiClient, settings.aiModelSettings, safetySettingsConfig);
            
            const text = response.text;
            setState(s => ({ ...s, description: text }));
        } catch (error) {
            console.error("Error generating world description:", error);
            alert("ƒê√£ x·∫£y ra l·ªói khi t·∫°o m√¥ t·∫£. Vui l√≤ng th·ª≠ l·∫°i.");
        } finally {
            setIsLoading(false);
        }
    }
    
    const currentDescription = perspectiveDescriptions[state.narrativePerspective];

    return (
        <FormSection title="Th·∫ø Gi·ªõi & C·ªët Truy·ªán" description="ƒê·∫∑t n·ªÅn m√≥ng cho th·∫ø gi·ªõi m√† b·∫°n s·∫Øp th·ªëng tr·ªã.">
            <InputField
                label="Th·ªÉ lo·∫°i game"
                id="genre"
                placeholder="VD: Ti√™n hi·ªáp, T·∫≠n th·∫ø, Hoan d√¢m th·∫ø gi·ªõi..."
                value={state.genre}
                onChange={e => setState(s => ({ ...s, genre: e.target.value }))}
            />
            <div>
                <label htmlFor="narrative-perspective" className="block text-sm font-medium text-neutral-400 mb-2">Ng√¥i k·ªÉ</label>
                <select
                    id="narrative-perspective"
                    value={state.narrativePerspective}
                    onChange={e => setState(s => ({ ...s, narrativePerspective: e.target.value as NarrativePerspective }))}
                    className="w-full px-4 py-3 bg-black/20 border border-white/10 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500"
                >
                    {Object.keys(perspectiveDescriptions).map(key => (
                        <option key={key} value={key}>{perspectiveDescriptions[key as NarrativePerspective].title}</option>
                    ))}
                </select>
                {currentDescription && (
                    <div className="mt-3 p-3 bg-black/20 rounded-lg border border-white/10 transition-all duration-300 animate-fade-in-fast">
                        <p className="text-sm font-semibold text-white">{currentDescription.title}</p>
                        <p className="text-xs text-neutral-300 mt-1">{currentDescription.text}</p>
                        {currentDescription.special && (
                            <p className="text-xs text-amber-300 mt-2 font-bold">[ƒêI·ªÇM ƒê·∫∂C BI·ªÜT] {currentDescription.special}</p>
                        )}
                    </div>
                )}
            </div>
            <div>
                 <div className="flex justify-between items-center mb-2">
                    <label htmlFor="description" className="block text-sm font-medium text-neutral-400">M√¥ t·∫£ B·ªëi C·∫£nh</label>
                    <button
                        onClick={handleGenerateDescription}
                        disabled={isLoading}
                        className="p-2 text-neutral-400 hover:text-white transition-colors rounded-full bg-black/20 border border-white/10 hover:bg-white/10 disabled:opacity-50 disabled:cursor-not-allowed"
                        title="AI H·ªó tr·ª£ B·ªëi c·∫£nh"
                    >
                        <SparklesIcon isLoading={isLoading} />
                    </button>
                </div>
                <TextareaField
                    id="description"
                    placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ b·ªëi c·∫£nh, l·ªãch s·ª≠, c√°c th·∫ø l·ª±c ch√≠nh... ho·∫∑c ƒë·ªÉ AI h·ªó tr·ª£."
                    value={state.description}
                    onChange={e => setState(s => ({ ...s, description: e.target.value }))}
                    rows={5}
                />
            </div>
            <ToggleSwitch
                label="Ch·∫ø ƒë·ªô 18+ (NSFW)"
                id="nsfw-toggle"
                enabled={state.isNsfw}
                setEnabled={enabled => setState(s => ({ ...s, isNsfw: enabled }))}
                description="C·ªët truy·ªán s·∫Ω ch·ª©a c√°c t√¨nh hu·ªëng v√† m√¥ t·∫£ t√¨nh d·ª•c kh√¥ng che ƒë·∫≠y."
            />
        </FormSection>
    )
}

export default WorldInfoForm;